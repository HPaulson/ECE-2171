
C:/Users/hpaulson/Documents/Lab3/part2/Lab3_Part1.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
Hunter Paulson - ECE 2161 Lab 3 Part 2
*/
.text
.global _start
_start: 
LDR R4, =RESULT
   0:	e59f4064 	ldr	r4, [pc, #100]	; 6c <NUMBERS+0x1c>
ADD R1, R4, #8 
   4:	e2841008 	add	r1, r4, #8
LDR R0, [R4, #4]
   8:	e5940004 	ldr	r0, [r4, #4]
LDR R3, [R1]
   c:	e5913000 	ldr	r3, [r1]
BL SUB1 //call subroutine at SUB1
  10:	eb000001 	bl	1c <SUB1>
STR R0, [R4] // Set Result to R0 since the routine returns via R0
  14:	e5840000 	str	r0, [r4]

00000018 <END>:
END: B END //stop here
  18:	eafffffe 	b	18 <END>

0000001c <SUB1>:
// R2 - Content of current iteration
// R3 - Current max value (Will be put into R0 after routine)

SUB1:
//instructions for SUB1 go here
	SUB R0, R0, #1 // Subtract one to keep track of how many numbers are left
  1c:	e2400001 	sub	r0, r0, #1
	CMP R0, #0  // If R0 is 0, we have chacked all N numbers (We are done the loop)
  20:	e3500000 	cmp	r0, #0
	BEQ DONE // Return value via R0 (Place contents of R3, current max, in R0). Otherwise:
  24:	0a000005 	beq	40 <DONE>
	ADD R1, R1, #4 // Set R1 to the address of the next number in the list
  28:	e2811004 	add	r1, r1, #4
	LDR R2, [R1] // Set R2 to contents of R3
  2c:	e5912000 	ldr	r2, [r1]
	CMP R3, R2 // Comapre R3 (existing max) and R2 (conents of current iteration), so we can update the current max if needed
  30:	e1530002 	cmp	r3, r2
	BGE SUB1 // If R3 >= R2, run the loop again to keep checking. Otherwise:
  34:	aafffff8 	bge	1c <SUB1>
	MOV R3, R2 // Set R3 to R2 because the current iteration is larger than the previous max
  38:	e1a03002 	mov	r3, r2
	B SUB1 // Run the loop again, with no conditional. We always run again regardless of previous CMP flag.
  3c:	eafffff6 	b	1c <SUB1>

00000040 <DONE>:

DONE: MOV R0, R3 // Return via R0
  40:	e1a00003 	mov	r0, r3
BX LR // End of the subroutine; goes back
  44:	e12fff1e 	bx	lr

00000048 <RESULT>:
  48:	00000000 	.word	0x00000000

0000004c <N>:
  4c:	00000007 	.word	0x00000007

00000050 <NUMBERS>:
  50:	00000004 	.word	0x00000004
  54:	00000005 	.word	0x00000005
  58:	00000003 	.word	0x00000003
  5c:	00000006 	.word	0x00000006
  60:	00000001 	.word	0x00000001
  64:	00000008 	.word	0x00000008
  68:	00000002 	.word	0x00000002
  6c:	00000048 	.word	0x00000048
