
C:/Users/hpaulson/Documents/Lab3/part3/Lab3_Part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

		.text
		.global	_start
_start:		
	//Places the immediate value 0 into register R4
	MOV		R4, #0
   0:	e3a04000 	mov	r4, #0
	//Loads the immediate value of KEY_BASE (0xFF200050) into R5
	LDR		R5, =KEY_BASE	// base address of KEY pushbuttons
   4:	e59f518c 	ldr	r5, [pc, #396]	; 198 <END_SEG7+0x8>
	//Loads the immediate value of HEX3_HEX0_BASE (0xFF200020) into R6
	LDR		R6, =HEX3_HEX0_BASE	// base address of HEX3_HEX0 7-segs
   8:	e59f618c 	ldr	r6, [pc, #396]	; 19c <END_SEG7+0xc>
	//Stores the value in R4 (0) at the address of R6 (HEX3_HEX0_BASE)
	//Results in the HEX3_HEX0_BASE register being set to 0, HEX displays are now cleared or blank
	STR		R4, [R6]	// clear the display
   c:	e5864000 	str	r4, [r6]

00000010 <MAIN_LOOP>:

MAIN_LOOP:
    B KEY0 // Start at key0
  10:	eaffffff 	b	14 <KEY0>

00000014 <KEY0>:
    
KEY0:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR	R1, [R5]
  14:	e5951000 	ldr	r1, [r5]
	// R1 = R1 & 0x1 (AND the value from the KEY register with 1 to isolate the KEY0 value)
	ANDS R1, R1, #0x1
  18:	e2111001 	ands	r1, r1, #1
	//Check if the result of the AND operation is equal to 1 (KEY0)
	CMP R1, #0x1
  1c:	e3510001 	cmp	r1, #1
	//If not pressed, jump to KEY1 check (currently empty for you to fill in)
	BNE KEY1
  20:	1a000007 	bne	44 <KEY1>
	//If R1 == 0x1, the following code runs (i.e. KEY0 is pressed)
	//Move the value 0 into R4 (resets the count variable to 0)
	MOV R4, #0
  24:	e3a04000 	mov	r4, #0
	//Copy R4 into the R0 register (Needs to be in R0 since SEG7_CODE subroutine expects the function argument in R0)
	//ARM calling convention dictates that R0 should be used for the first argument
	MOV R0, R4
  28:	e1a00004 	mov	r0, r4
	//Branch and link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the BOUNDS_CHECK label
	BL BOUNDS_CHECK
  2c:	eb000028 	bl	d4 <BOUNDS_CHECK>
	//Branch and Link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the SEG7_CODE label
	BL SEG7_CODE
  30:	eb00002e 	bl	f0 <SEG7_CODE>
    //Binary Value to display on the HEX display now in R0
    //Store the value in R0 (representing which segments to turn on) at the address in R6 (HEX3_0_BASE = 0xFF200020)
    STR R0, [R6]
  34:	e5860000 	str	r0, [r6]

00000038 <WAIT_KEY0>:
    //Wait until the KEY is released
WAIT_KEY0:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR R1, [R5]
  38:	e5951000 	ldr	r1, [r5]
    //Compare R1 and 0
    CMP R1, #0
  3c:	e3510000 	cmp	r1, #0
    //If R1 and 0 are not equal, go to the WAIT_KEY0 label
    BNE WAIT_KEY0
  40:	1afffffc 	bne	38 <WAIT_KEY0>

00000044 <KEY1>:
KEY1:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR	R1, [R5]
  44:	e5951000 	ldr	r1, [r5]
	// R1 = R1 & 0x2 (AND the value from the KEY register with 2 to isolate the KEY1 value)
	ANDS R1, R1, #0x2
  48:	e2111002 	ands	r1, r1, #2
	//Check if the result of the AND operation is equal to 2 (KEY1)
	CMP R1, #0x2
  4c:	e3510002 	cmp	r1, #2
	//If not pressed, jump to KEY2 check
	BNE KEY2
  50:	1a000007 	bne	74 <KEY2>
	//If R1 == 0x2, the following code runs (i.e. KEY1 is pressed)
	// Increment R4 (The current number)
	ADD R4, R4, #1
  54:	e2844001 	add	r4, r4, #1
	//Copy R4 into the R0 register (Needs to be in R0 since SEG7_CODE subroutine expects the function argument in R0)
	//ARM calling convention dictates that R0 should be used for the first argument
	MOV R0, R4
  58:	e1a00004 	mov	r0, r4
	//Branch and link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the BOUNDS_CHECK label
	BL BOUNDS_CHECK
  5c:	eb00001c 	bl	d4 <BOUNDS_CHECK>
	//Branch and Link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the SEG7_CODE label
	BL SEG7_CODE
  60:	eb000022 	bl	f0 <SEG7_CODE>
    //Binary Value to display on the HEX display now in R0
    //Store the value in R0 (representing which segments to turn on) at the address in R6 (HEX3_0_BASE = 0xFF200020)
    STR R0, [R6]
  64:	e5860000 	str	r0, [r6]

00000068 <WAIT_KEY1>:
    //Wait until the KEY is released
WAIT_KEY1:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR R1, [R5]
  68:	e5951000 	ldr	r1, [r5]
    //Compare R1 and 0
    CMP R1, #0
  6c:	e3510000 	cmp	r1, #0
    //If R1 and 0 are not equal, go to the WAIT_KEY1 label
    BNE WAIT_KEY1
  70:	1afffffc 	bne	68 <WAIT_KEY1>

00000074 <KEY2>:
KEY2:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR	R1, [R5]
  74:	e5951000 	ldr	r1, [r5]
	// R1 = R1 & 0x4 (AND the value from the KEY register with 4 to isolate the KEY2 value)
	ANDS R1, R1, #0x4
  78:	e2111004 	ands	r1, r1, #4
	//Check if the result of the AND operation is equal to 4 (KEY2)
	CMP R1, #0x4
  7c:	e3510004 	cmp	r1, #4
	//If not pressed, jump to KEY3 check (currently empty for you to fill in)
	BNE KEY3
  80:	1a000007 	bne	a4 <KEY3>
	//If R1 == 0x4, the following code runs (i.e. KEY2 is pressed)
	// Increment R4 (The current displayed num)
	SUB R4, R4, #1
  84:	e2444001 	sub	r4, r4, #1
	//Copy R4 into the R0 register (Needs to be in R0 since SEG7_CODE subroutine expects the function argument in R0)
	//ARM calling convention dictates that R0 should be used for the first argument
	MOV R0, R4
  88:	e1a00004 	mov	r0, r4
	//Branch and link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the BOUNDS_CHECK label
	BL BOUNDS_CHECK
  8c:	eb000010 	bl	d4 <BOUNDS_CHECK>
	//Branch and Link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the SEG7_CODE label
	BL SEG7_CODE
  90:	eb000016 	bl	f0 <SEG7_CODE>
    //Binary Value to display on the HEX display now in R0
    //Store the value in R0 (representing which segments to turn on) at the address in R6 (HEX3_0_BASE = 0xFF200020)
    STR R0, [R6]
  94:	e5860000 	str	r0, [r6]

00000098 <WAIT_KEY2>:
    //Wait until the KEY is released
WAIT_KEY2:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR R1, [R5]
  98:	e5951000 	ldr	r1, [r5]
    //Compare R1 and 0
    CMP R1, #0
  9c:	e3510000 	cmp	r1, #0
    //If R1 and 0 are not equal, go to the WAIT_KEY2 label
    BNE WAIT_KEY2
  a0:	1afffffc 	bne	98 <WAIT_KEY2>

000000a4 <KEY3>:

KEY3:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR	R1, [R5]
  a4:	e5951000 	ldr	r1, [r5]
	// R1 = R1 & 0x8 (AND the value from the KEY register with 1 to isolate the KEY3 value)
	ANDS R1, R1, #0x8
  a8:	e2111008 	ands	r1, r1, #8
	//Check if the result of the AND operation is equal to 8 (KEY3)
	CMP R1, #0x8
  ac:	e3510008 	cmp	r1, #8
	//If not pressed, jump back to the loop and contiunue checking
	BNE MAIN_LOOP
  b0:	1affffd6 	bne	10 <MAIN_LOOP>
	//If R1 == 0x8, the following code runs (i.e. KEY3 is pressed)
	//Move the value 0 into R4 (resets the count variable to 0)
	MVN R4, #0
  b4:	e3e04000 	mvn	r4, #0
	//Copy R4 into the R0 register (Needs to be in R0 since SEG7_CODE subroutine expects the function argument in R0)
	//ARM calling convention dictates that R0 should be used for the first argument
	MOV R0, R4
  b8:	e1a00004 	mov	r0, r4
	//Branch and link (Link register stores address of next line of code so we know where to come back to)
	//Branches to code starting at the BOUNDS_CHECK label
	BL SEG7_CODE
  bc:	eb00000b 	bl	f0 <SEG7_CODE>
    //Binary Value to display on the HEX display now in R0
    //Store the value in R0 (representing which segments to turn on) at the address in R6 (HEX3_0_BASE = 0xFF200020)
    STR R0, [R6]
  c0:	e5860000 	str	r0, [r6]

000000c4 <WAIT_KEY3>:
    //Wait until the KEY is released
WAIT_KEY3:
	//Loads the contents of the address in R5 (KEY_BASE) into the register R1
	LDR R1, [R5]
  c4:	e5951000 	ldr	r1, [r5]
    //Compare R1 and 0
    CMP R1, #0
  c8:	e3510000 	cmp	r1, #0
    //If R1 and 0 are not equal, go to the WAIT_KEY3 label
    BNE WAIT_KEY3
  cc:	1afffffc 	bne	c4 <WAIT_KEY3>
    B MAIN_LOOP // Key 3 was pressed and unpressed, now go back to the start
  d0:	eaffffce 	b	10 <MAIN_LOOP>

000000d4 <BOUNDS_CHECK>:
/* Subroutine to check if the provided value is wihtin 0 - 9.
	If the value > 9, the value is set to 9	(Provided for you)
	If the value < 0, the value is set to 0 (YOU NEED to implement this)	
 */    
BOUNDS_CHECK:
	CMP R0, #9
  d4:	e3500009 	cmp	r0, #9
	BLE LOWER_BOUND_CHECK
  d8:	da000000 	ble	e0 <LOWER_BOUND_CHECK>
	//When R0 > 9, SET the value of R0 to 9
	MOV R0, #9
  dc:	e3a00009 	mov	r0, #9

000000e0 <LOWER_BOUND_CHECK>:
LOWER_BOUND_CHECK:
	//Add the code to complete the lower bounds check (when R0 < 0, set to 0)
	CMP R0, #0
  e0:	e3500000 	cmp	r0, #0
    BGE EPILOG
  e4:	aa000000 	bge	ec <EPILOG>
    MOV R0, #0
  e8:	e3a00000 	mov	r0, #0

000000ec <EPILOG>:
    
EPILOG:
	//Return to address in link register (next line after the function was called)
	BX LR
  ec:	e12fff1e 	bx	lr

000000f0 <SEG7_CODE>:
/* Subroutine to convert the digits from 0 to 9, or blank, to be shown on a HEX display.
 * Parameters: R0 = the decimal value of the digit to be displayed
 * Returns: R0 = bit patterm to be written to the HEX display
 */
SEG7_CODE:	
		MOV		R1, #0		// blank
  f0:	e3a01000 	mov	r1, #0

000000f4 <DISPLAY0>:
DISPLAY0:
		CMP		R0, #0
  f4:	e3500000 	cmp	r0, #0
        BNE		DISPLAY1
  f8:	1a000001 	bne	104 <DISPLAY1>
		MOV		R1, #0b0111111	// 0
  fc:	e3a0103f 	mov	r1, #63	; 0x3f
        B 		END_SEG7
 100:	ea000022 	b	190 <END_SEG7>

00000104 <DISPLAY1>:
DISPLAY1:		
		CMP		R0, #1
 104:	e3500001 	cmp	r0, #1
        BNE		DISPLAY2
 108:	1a000001 	bne	114 <DISPLAY2>
		MOV		R1, #0b0000110	// 1
 10c:	e3a01006 	mov	r1, #6
        B 		END_SEG7
 110:	ea00001e 	b	190 <END_SEG7>

00000114 <DISPLAY2>:
DISPLAY2:
		CMP		R0, #2
 114:	e3500002 	cmp	r0, #2
        BNE		DISPLAY3
 118:	1a000001 	bne	124 <DISPLAY3>
		MOV		R1, #0b1011011	// 2
 11c:	e3a0105b 	mov	r1, #91	; 0x5b
        B	 	END_SEG7
 120:	ea00001a 	b	190 <END_SEG7>

00000124 <DISPLAY3>:
DISPLAY3:
		CMP		R0, #3
 124:	e3500003 	cmp	r0, #3
        BNE		DISPLAY4
 128:	1a000001 	bne	134 <DISPLAY4>
		MOV		R1, #0b1001111	// 3
 12c:	e3a0104f 	mov	r1, #79	; 0x4f
        B	 	END_SEG7	
 130:	ea000016 	b	190 <END_SEG7>

00000134 <DISPLAY4>:
DISPLAY4:
		CMP		R0, #4
 134:	e3500004 	cmp	r0, #4
        BNE		DISPLAY5
 138:	1a000001 	bne	144 <DISPLAY5>
		MOV		R1, #0b1100110	// 4
 13c:	e3a01066 	mov	r1, #102	; 0x66
        B	 	END_SEG7
 140:	ea000012 	b	190 <END_SEG7>

00000144 <DISPLAY5>:
DISPLAY5:
		CMP		R0, #5
 144:	e3500005 	cmp	r0, #5
        BNE		DISPLAY6
 148:	1a000001 	bne	154 <DISPLAY6>
		MOV		R1, #0b1101101	// 5
 14c:	e3a0106d 	mov	r1, #109	; 0x6d
        B	 	END_SEG7
 150:	ea00000e 	b	190 <END_SEG7>

00000154 <DISPLAY6>:
DISPLAY6:
		CMP		R0, #6
 154:	e3500006 	cmp	r0, #6
        BNE		DISPLAY7
 158:	1a000001 	bne	164 <DISPLAY7>
		MOV		R1, #0b1111101	// 6
 15c:	e3a0107d 	mov	r1, #125	; 0x7d
		B	 	END_SEG7
 160:	ea00000a 	b	190 <END_SEG7>

00000164 <DISPLAY7>:
DISPLAY7:
		CMP		R0, #7
 164:	e3500007 	cmp	r0, #7
		BNE		DISPLAY8
 168:	1a000001 	bne	174 <DISPLAY8>
		MOV		R1, #0b0000111	// 7
 16c:	e3a01007 	mov	r1, #7
		B	 	END_SEG7
 170:	ea000006 	b	190 <END_SEG7>

00000174 <DISPLAY8>:
DISPLAY8:
		CMP		R0, #8
 174:	e3500008 	cmp	r0, #8
		BNE		DISPLAY9
 178:	1a000001 	bne	184 <DISPLAY9>
		MOV		R1, #0b1111111	// 8
 17c:	e3a0107f 	mov	r1, #127	; 0x7f
		B	 	END_SEG7
 180:	ea000002 	b	190 <END_SEG7>

00000184 <DISPLAY9>:
DISPLAY9:
		CMP		R0, #9
 184:	e3500009 	cmp	r0, #9
		BNE		END_SEG7
 188:	1a000000 	bne	190 <END_SEG7>
		MOV		R1, #0b1100111	// 9
 18c:	e3a01067 	mov	r1, #103	; 0x67

00000190 <END_SEG7>:
END_SEG7:
		MOV		R0, R1		// return bit pattern
 190:	e1a00001 	mov	r0, r1
		BX 		LR
 194:	e12fff1e 	bx	lr
 198:	ff200050 	.word	0xff200050
 19c:	ff200020 	.word	0xff200020
