
C:/Users/hpaulson/Documents/Lab6/lab6.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 5c 07 00 00 60 07 00 00 64 07 00 00     @...\...`...d...
  30:	68 07 00 00 58 07 00 00 6c 07 00 00 70 07 00 00     h...X...l...p...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000186 	bl	6f4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000008b4 	.word	0x000008b4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000cf0 	.word	0x00000cf0

00000124 <__cs3_heap_start_ptr>:
 124:	00000d18 	.word	0x00000d18

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000cf8 	.word	0x00000cf8
 170:	00000cfb 	.word	0x00000cfb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000cf8 	.word	0x00000cf8
 1bc:	00000cf8 	.word	0x00000cf8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000cf8 	.word	0x00000cf8
 200:	00000000 	.word	0x00000000
 204:	000007fc 	.word	0x000007fc

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000007fc 	.word	0x000007fc
 250:	00000cfc 	.word	0x00000cfc
 254:	000008b8 	.word	0x000008b8
 258:	00000000 	.word	0x00000000

0000025c <get_jtag>:
    }
    }
}

char get_jtag(volatile int* JTAG_UART_PTR) {
	int data = *JTAG_UART_PTR;
 25c:	e5900000 	ldr	r0, [r0]
    if (data & 0x00008000) {
 260:	e3100902 	tst	r0, #32768	; 0x8000
    	return (char)data & 0xFF;
 264:	16ef0070 	uxtbne	r0, r0
    }
    else {
    	return '\0';
 268:	03a00000 	moveq	r0, #0
    }
}
 26c:	e12fff1e 	bx	lr

00000270 <put_jtag>:

void put_jtag(volatile int* JTAG_UART_PTR, char c) {
	int control = *(JTAG_UART_PTR + 1);
 270:	e5903004 	ldr	r3, [r0, #4]
    if (control & 0xFFFF0000) *JTAG_UART_PTR = c;
 274:	e1b03823 	lsrs	r3, r3, #16
 278:	15801000 	strne	r1, [r0]
 27c:	e12fff1e 	bx	lr

00000280 <put_string>:
}

void put_string(char* string) {
 280:	e92d4038 	push	{r3, r4, r5, lr}
    volatile int* JTAG_UART_ptr = (int*) JTAG_UART_BASE;
	char* c_ptr = string;
    while (*c_ptr != '\0') {
 284:	e5d01000 	ldrb	r1, [r0]
 288:	e3510000 	cmp	r1, #0
 28c:	08bd8038 	popeq	{r3, r4, r5, pc}
 290:	e1a04000 	mov	r4, r0
    	put_jtag(JTAG_UART_ptr, *c_ptr);
 294:	e3a05a01 	mov	r5, #4096	; 0x1000
 298:	e34f5f20 	movt	r5, #65312	; 0xff20
 29c:	e1a00005 	mov	r0, r5
 2a0:	ebfffff2 	bl	270 <put_jtag>
}

void put_string(char* string) {
    volatile int* JTAG_UART_ptr = (int*) JTAG_UART_BASE;
	char* c_ptr = string;
    while (*c_ptr != '\0') {
 2a4:	e5f41001 	ldrb	r1, [r4, #1]!
 2a8:	e3510000 	cmp	r1, #0
 2ac:	1afffffa 	bne	29c <put_string+0x1c>
 2b0:	e8bd8038 	pop	{r3, r4, r5, pc}

000002b4 <main>:
    ENTER,
    PRINT
} jtag_states;
 
 
int main(void) {
 2b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2b8:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
    put_string("\nLab6 by Hunter Paulson \n");
 2bc:	e3000800 	movw	r0, #2048	; 0x800
 2c0:	e3400000 	movt	r0, #0
 2c4:	ebffffed 	bl	280 <put_string>
    /* Declare variables and volatile pointers to I/O registers */
    volatile int* JTAG_UART_ptr = (int*) JTAG_UART_BASE;
    jtag_states state = IDLE; 		//defines a state variable and assigns the first state
    char c;							//character read from JTAG
   	char digit[MAX_SIZE];
   	int size = 0;
 2c8:	e3a07000 	mov	r7, #0
 
int main(void) {
    put_string("\nLab6 by Hunter Paulson \n");
    /* Declare variables and volatile pointers to I/O registers */
    volatile int* JTAG_UART_ptr = (int*) JTAG_UART_BASE;
    jtag_states state = IDLE; 		//defines a state variable and assigns the first state
 2cc:	e1a04007 	mov	r4, r7
    char c;							//character read from JTAG
   	char digit[MAX_SIZE];
   	int size = 0;

    while (1) {
        c = get_jtag(JTAG_UART_ptr);
 2d0:	e3a05a01 	mov	r5, #4096	; 0x1000
 2d4:	e34f5f20 	movt	r5, #65312	; 0xff20
                    *(digit + i) = 0; // reset array
                    ++i;
                }
                size = 0;
                state = IDLE;
                put_jtag(JTAG_UART_ptr, '\n');
 2d8:	e3a0a00a 	mov	r10, #10
                	char x = digit[i];
                	put_jtag(JTAG_UART_ptr, x);
                    *(digit + i) = 0; // reset array
                    ++i;
                }
                size = 0;
 2dc:	e1a06007 	mov	r6, r7
        switch(state){		//in each state, use a switch (c) to take care of different cases. 
            case IDLE: {	
                //Tell the user to press ESC to start typing a string
                //other work you may want it to do here
                //move on to the next state
                put_string("Press Esc to start:\n");
 2e0:	e300881c 	movw	r8, #2076	; 0x81c
 2e4:	e3408000 	movt	r8, #0
                //Wait for ESC; enter next state when received;
                //other work you may want it to do here;
                //move on to the next state;
                if (c == '\0') break;
                if (c != ESCAPE_KEY) break;
                put_string("Enter a string, then press [ENTER].\n");
 2e8:	e3009834 	movw	r9, #2100	; 0x834
 2ec:	e3409000 	movt	r9, #0
 2f0:	eaffffff 	b	2f4 <main+0x40>
    char c;							//character read from JTAG
   	char digit[MAX_SIZE];
   	int size = 0;

    while (1) {
        c = get_jtag(JTAG_UART_ptr);
 2f4:	e1a00005 	mov	r0, r5
 2f8:	ebffffd7 	bl	25c <get_jtag>
 2fc:	e1a0b000 	mov	r11, r0
        //The commnets are suggestions only; It is up to you how to use these states below
        switch(state){		//in each state, use a switch (c) to take care of different cases. 
 300:	e3540003 	cmp	r4, #3
 304:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
 308:	eafffff9 	b	2f4 <main+0x40>
 30c:	00000330 	.word	0x00000330
 310:	00000340 	.word	0x00000340
 314:	00000358 	.word	0x00000358
 318:	0000031c 	.word	0x0000031c
            }            
                
            case PRINT: {
                
            	int i = 0;
                while(i < size) {
 31c:	e3570000 	cmp	r7, #0
 320:	c28d4000 	addgt	r4, sp, #0
    ENTER,
    PRINT
} jtag_states;
 
 
int main(void) {
 324:	c0877004 	addgt	r7, r7, r4
            }            
                
            case PRINT: {
                
            	int i = 0;
                while(i < size) {
 328:	ca00001a 	bgt	398 <main+0xe4>
 32c:	ea00001f 	b	3b0 <main+0xfc>
        switch(state){		//in each state, use a switch (c) to take care of different cases. 
            case IDLE: {	
                //Tell the user to press ESC to start typing a string
                //other work you may want it to do here
                //move on to the next state
                put_string("Press Esc to start:\n");
 330:	e1a00008 	mov	r0, r8
 334:	ebffffd1 	bl	280 <put_string>
                state = START;
 338:	e3a04001 	mov	r4, #1
                break;
 33c:	eaffffec 	b	2f4 <main+0x40>
                //Tell the user to type in a string, followed by Enter:
                //Wait for ESC; enter next state when received;
                //other work you may want it to do here;
                //move on to the next state;
                if (c == '\0') break;
                if (c != ESCAPE_KEY) break;
 340:	e350001b 	cmp	r0, #27
 344:	1affffea 	bne	2f4 <main+0x40>
                put_string("Enter a string, then press [ENTER].\n");
 348:	e1a00009 	mov	r0, r9
 34c:	ebffffcb 	bl	280 <put_string>
                state = ENTER;
 350:	e3a04002 	mov	r4, #2
                break;
 354:	eaffffe6 	b	2f4 <main+0x40>
            case ENTER:{
     			//Process the string the user typed in
                //Check for Enter; (end of string)
				//other work you may want it to do here
                //move on to the next state
            	if (c == '\0') break;
 358:	e3500000 	cmp	r0, #0
 35c:	0affffe4 	beq	2f4 <main+0x40>
                put_jtag(JTAG_UART_ptr, c);
 360:	e1a00005 	mov	r0, r5
 364:	e1a0100b 	mov	r1, r11
 368:	ebffffc0 	bl	270 <put_jtag>
                if (c == ENTER_KEY) {
 36c:	e35b000a 	cmp	r11, #10
              		state = PRINT;
 370:	03a04003 	moveq	r4, #3
                //Check for Enter; (end of string)
				//other work you may want it to do here
                //move on to the next state
            	if (c == '\0') break;
                put_jtag(JTAG_UART_ptr, c);
                if (c == ENTER_KEY) {
 374:	0affffde 	beq	2f4 <main+0x40>
              		state = PRINT;
                	break;
                }
                else if (0x30 <= c && c <= (9 + 0x30)) {
 378:	e24b3030 	sub	r3, r11, #48	; 0x30
 37c:	e6ef3073 	uxtb	r3, r3
 380:	e3530009 	cmp	r3, #9
                    	 digit[size] = c;
 384:	928d2ffa 	addls	r2, sp, #1000	; 0x3e8
 388:	90823007 	addls	r3, r2, r7
 38c:	9543b3e8 	strbls	r11, [r3, #-1000]	; 0xfffffc18
                         size++;
 390:	92877001 	addls	r7, r7, #1
 394:	eaffffd6 	b	2f4 <main+0x40>
            case PRINT: {
                
            	int i = 0;
                while(i < size) {
                	char x = digit[i];
                	put_jtag(JTAG_UART_ptr, x);
 398:	e1a00005 	mov	r0, r5
 39c:	e5d41000 	ldrb	r1, [r4]
 3a0:	ebffffb2 	bl	270 <put_jtag>
                    *(digit + i) = 0; // reset array
 3a4:	e4c46001 	strb	r6, [r4], #1
            }            
                
            case PRINT: {
                
            	int i = 0;
                while(i < size) {
 3a8:	e1540007 	cmp	r4, r7
 3ac:	1afffff9 	bne	398 <main+0xe4>
                    *(digit + i) = 0; // reset array
                    ++i;
                }
                size = 0;
                state = IDLE;
                put_jtag(JTAG_UART_ptr, '\n');
 3b0:	e1a00005 	mov	r0, r5
 3b4:	e1a0100a 	mov	r1, r10
 3b8:	ebffffac 	bl	270 <put_jtag>
                	char x = digit[i];
                	put_jtag(JTAG_UART_ptr, x);
                    *(digit + i) = 0; // reset array
                    ++i;
                }
                size = 0;
 3bc:	e1a07006 	mov	r7, r6
                state = IDLE;
 3c0:	e1a04006 	mov	r4, r6
                put_jtag(JTAG_UART_ptr, '\n');
               
                break;
 3c4:	eaffffca 	b	2f4 <main+0x40>

000003c8 <atexit>:
 3c8:	e1a01000 	mov	r1, r0
 3cc:	e3a00000 	mov	r0, #0
 3d0:	e92d4008 	push	{r3, lr}
 3d4:	e1a02000 	mov	r2, r0
 3d8:	e1a03000 	mov	r3, r0
 3dc:	eb00000e 	bl	41c <__register_exitproc>
 3e0:	e8bd4008 	pop	{r3, lr}
 3e4:	e12fff1e 	bx	lr

000003e8 <exit>:
 3e8:	e92d4008 	push	{r3, lr}
 3ec:	e3a01000 	mov	r1, #0
 3f0:	e1a04000 	mov	r4, r0
 3f4:	eb000045 	bl	510 <__call_exitprocs>
 3f8:	e59f3018 	ldr	r3, [pc, #24]	; 418 <exit+0x30>
 3fc:	e5930000 	ldr	r0, [r3]
 400:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 404:	e3530000 	cmp	r3, #0
 408:	11a0e00f 	movne	lr, pc
 40c:	112fff13 	bxne	r3
 410:	e1a00004 	mov	r0, r4
 414:	eb0000c9 	bl	740 <_exit>
 418:	0000085c 	.word	0x0000085c

0000041c <__register_exitproc>:
 41c:	e59fc0e4 	ldr	r12, [pc, #228]	; 508 <__register_exitproc+0xec>
 420:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 424:	e59c4000 	ldr	r4, [r12]
 428:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 42c:	e35c0000 	cmp	r12, #0
 430:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 434:	e59c5004 	ldr	r5, [r12, #4]
 438:	0584c148 	streq	r12, [r4, #328]	; 0x148
 43c:	e355001f 	cmp	r5, #31
 440:	e24dd010 	sub	sp, sp, #16
 444:	e1a06000 	mov	r6, r0
 448:	da000015 	ble	4a4 <__register_exitproc+0x88>
 44c:	e59f00b8 	ldr	r0, [pc, #184]	; 50c <__register_exitproc+0xf0>
 450:	e3500000 	cmp	r0, #0
 454:	1a000001 	bne	460 <__register_exitproc+0x44>
 458:	e3e00000 	mvn	r0, #0
 45c:	ea000018 	b	4c4 <__register_exitproc+0xa8>
 460:	e3a00e19 	mov	r0, #400	; 0x190
 464:	e58d100c 	str	r1, [sp, #12]
 468:	e58d2008 	str	r2, [sp, #8]
 46c:	e58d3004 	str	r3, [sp, #4]
 470:	e320f000 	nop	{0}
 474:	e250c000 	subs	r12, r0, #0
 478:	e59d100c 	ldr	r1, [sp, #12]
 47c:	e59d2008 	ldr	r2, [sp, #8]
 480:	e59d3004 	ldr	r3, [sp, #4]
 484:	0afffff3 	beq	458 <__register_exitproc+0x3c>
 488:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 48c:	e3a00000 	mov	r0, #0
 490:	e58c0004 	str	r0, [r12, #4]
 494:	e58c5000 	str	r5, [r12]
 498:	e584c148 	str	r12, [r4, #328]	; 0x148
 49c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 4a0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 4a4:	e3560000 	cmp	r6, #0
 4a8:	e59c4004 	ldr	r4, [r12, #4]
 4ac:	1a000007 	bne	4d0 <__register_exitproc+0xb4>
 4b0:	e2843002 	add	r3, r4, #2
 4b4:	e2844001 	add	r4, r4, #1
 4b8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 4bc:	e58c4004 	str	r4, [r12, #4]
 4c0:	e3a00000 	mov	r0, #0
 4c4:	e28dd010 	add	sp, sp, #16
 4c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 4cc:	e12fff1e 	bx	lr
 4d0:	e3a00001 	mov	r0, #1
 4d4:	e1a00410 	lsl	r0, r0, r4
 4d8:	e08c8104 	add	r8, r12, r4, lsl #2
 4dc:	e3560002 	cmp	r6, #2
 4e0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 4e4:	e5883108 	str	r3, [r8, #264]	; 0x108
 4e8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 4ec:	e1877000 	orr	r7, r7, r0
 4f0:	01830000 	orreq	r0, r3, r0
 4f4:	e1a05008 	mov	r5, r8
 4f8:	e5882088 	str	r2, [r8, #136]	; 0x88
 4fc:	e58c7188 	str	r7, [r12, #392]	; 0x188
 500:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 504:	eaffffe9 	b	4b0 <__register_exitproc+0x94>
 508:	0000085c 	.word	0x0000085c
 50c:	00000000 	.word	0x00000000

00000510 <__call_exitprocs>:
 510:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 514:	e59f3168 	ldr	r3, [pc, #360]	; 684 <__call_exitprocs+0x174>
 518:	e5933000 	ldr	r3, [r3]
 51c:	e24dd014 	sub	sp, sp, #20
 520:	e58d3004 	str	r3, [sp, #4]
 524:	e2833f52 	add	r3, r3, #328	; 0x148
 528:	e58d0008 	str	r0, [sp, #8]
 52c:	e58d300c 	str	r3, [sp, #12]
 530:	e1a07001 	mov	r7, r1
 534:	e3a08001 	mov	r8, #1
 538:	e59d3004 	ldr	r3, [sp, #4]
 53c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 540:	e3560000 	cmp	r6, #0
 544:	e59db00c 	ldr	r11, [sp, #12]
 548:	0a000033 	beq	61c <__call_exitprocs+0x10c>
 54c:	e5965004 	ldr	r5, [r6, #4]
 550:	e2554001 	subs	r4, r5, #1
 554:	5286a088 	addpl	r10, r6, #136	; 0x88
 558:	5285501f 	addpl	r5, r5, #31
 55c:	508a5105 	addpl	r5, r10, r5, lsl #2
 560:	5a000007 	bpl	584 <__call_exitprocs+0x74>
 564:	ea000029 	b	610 <__call_exitprocs+0x100>
 568:	e5953000 	ldr	r3, [r5]
 56c:	e1530007 	cmp	r3, r7
 570:	0a000005 	beq	58c <__call_exitprocs+0x7c>
 574:	e2444001 	sub	r4, r4, #1
 578:	e3740001 	cmn	r4, #1
 57c:	e2455004 	sub	r5, r5, #4
 580:	0a000022 	beq	610 <__call_exitprocs+0x100>
 584:	e3570000 	cmp	r7, #0
 588:	1afffff6 	bne	568 <__call_exitprocs+0x58>
 58c:	e5963004 	ldr	r3, [r6, #4]
 590:	e06a2005 	rsb	r2, r10, r5
 594:	e2433001 	sub	r3, r3, #1
 598:	e0862002 	add	r2, r6, r2
 59c:	e1530004 	cmp	r3, r4
 5a0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 5a4:	13a01000 	movne	r1, #0
 5a8:	05864004 	streq	r4, [r6, #4]
 5ac:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 5b0:	e3530000 	cmp	r3, #0
 5b4:	0affffee 	beq	574 <__call_exitprocs+0x64>
 5b8:	e1a02418 	lsl	r2, r8, r4
 5bc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 5c0:	e1120001 	tst	r2, r1
 5c4:	e5969004 	ldr	r9, [r6, #4]
 5c8:	0a000016 	beq	628 <__call_exitprocs+0x118>
 5cc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 5d0:	e1120001 	tst	r2, r1
 5d4:	1a000016 	bne	634 <__call_exitprocs+0x124>
 5d8:	e59d0008 	ldr	r0, [sp, #8]
 5dc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 5e0:	e1a0e00f 	mov	lr, pc
 5e4:	e12fff13 	bx	r3
 5e8:	e5963004 	ldr	r3, [r6, #4]
 5ec:	e1530009 	cmp	r3, r9
 5f0:	1affffd0 	bne	538 <__call_exitprocs+0x28>
 5f4:	e59b3000 	ldr	r3, [r11]
 5f8:	e1530006 	cmp	r3, r6
 5fc:	1affffcd 	bne	538 <__call_exitprocs+0x28>
 600:	e2444001 	sub	r4, r4, #1
 604:	e3740001 	cmn	r4, #1
 608:	e2455004 	sub	r5, r5, #4
 60c:	1affffdc 	bne	584 <__call_exitprocs+0x74>
 610:	e59f1070 	ldr	r1, [pc, #112]	; 688 <__call_exitprocs+0x178>
 614:	e3510000 	cmp	r1, #0
 618:	1a000009 	bne	644 <__call_exitprocs+0x134>
 61c:	e28dd014 	add	sp, sp, #20
 620:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 624:	e12fff1e 	bx	lr
 628:	e1a0e00f 	mov	lr, pc
 62c:	e12fff13 	bx	r3
 630:	eaffffec 	b	5e8 <__call_exitprocs+0xd8>
 634:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 638:	e1a0e00f 	mov	lr, pc
 63c:	e12fff13 	bx	r3
 640:	eaffffe8 	b	5e8 <__call_exitprocs+0xd8>
 644:	e5963004 	ldr	r3, [r6, #4]
 648:	e3530000 	cmp	r3, #0
 64c:	e5963000 	ldr	r3, [r6]
 650:	1a000008 	bne	678 <__call_exitprocs+0x168>
 654:	e3530000 	cmp	r3, #0
 658:	0a000006 	beq	678 <__call_exitprocs+0x168>
 65c:	e1a00006 	mov	r0, r6
 660:	e58b3000 	str	r3, [r11]
 664:	e320f000 	nop	{0}
 668:	e59b6000 	ldr	r6, [r11]
 66c:	e3560000 	cmp	r6, #0
 670:	1affffb5 	bne	54c <__call_exitprocs+0x3c>
 674:	eaffffe8 	b	61c <__call_exitprocs+0x10c>
 678:	e1a0b006 	mov	r11, r6
 67c:	e1a06003 	mov	r6, r3
 680:	eafffff9 	b	66c <__call_exitprocs+0x15c>
 684:	0000085c 	.word	0x0000085c
 688:	00000000 	.word	0x00000000

0000068c <register_fini>:
 68c:	e92d4008 	push	{r3, lr}
 690:	e59f3010 	ldr	r3, [pc, #16]	; 6a8 <register_fini+0x1c>
 694:	e3530000 	cmp	r3, #0
 698:	159f000c 	ldrne	r0, [pc, #12]	; 6ac <register_fini+0x20>
 69c:	1bffff49 	blne	3c8 <atexit>
 6a0:	e8bd4008 	pop	{r3, lr}
 6a4:	e12fff1e 	bx	lr
 6a8:	00000884 	.word	0x00000884
 6ac:	000006b0 	.word	0x000006b0

000006b0 <__libc_fini_array>:
 6b0:	e92d4038 	push	{r3, r4, r5, lr}
 6b4:	e59f5030 	ldr	r5, [pc, #48]	; 6ec <__libc_fini_array+0x3c>
 6b8:	e59f4030 	ldr	r4, [pc, #48]	; 6f0 <__libc_fini_array+0x40>
 6bc:	e0654004 	rsb	r4, r5, r4
 6c0:	e1b04144 	asrs	r4, r4, #2
 6c4:	10855104 	addne	r5, r5, r4, lsl #2
 6c8:	0a000004 	beq	6e0 <__libc_fini_array+0x30>
 6cc:	e5353004 	ldr	r3, [r5, #-4]!
 6d0:	e1a0e00f 	mov	lr, pc
 6d4:	e12fff13 	bx	r3
 6d8:	e2544001 	subs	r4, r4, #1
 6dc:	1afffffa 	bne	6cc <__libc_fini_array+0x1c>
 6e0:	eb000067 	bl	884 <__libc_fini>
 6e4:	e8bd4038 	pop	{r3, r4, r5, lr}
 6e8:	e12fff1e 	bx	lr
 6ec:	0000089c 	.word	0x0000089c
 6f0:	000008a0 	.word	0x000008a0

000006f4 <__cs3_premain>:
 6f4:	e92d4008 	push	{r3, lr}
 6f8:	eb00001d 	bl	774 <__libc_init_array>
 6fc:	e59f3030 	ldr	r3, [pc, #48]	; 734 <__cs3_premain+0x40>
 700:	e3530000 	cmp	r3, #0
 704:	15930000 	ldrne	r0, [r3]
 708:	01a00003 	moveq	r0, r3
 70c:	e59f3024 	ldr	r3, [pc, #36]	; 738 <__cs3_premain+0x44>
 710:	e3530000 	cmp	r3, #0
 714:	15931000 	ldrne	r1, [r3]
 718:	01a01003 	moveq	r1, r3
 71c:	e3a02000 	mov	r2, #0
 720:	ebfffee3 	bl	2b4 <main>
 724:	e59f3010 	ldr	r3, [pc, #16]	; 73c <__cs3_premain+0x48>
 728:	e3530000 	cmp	r3, #0
 72c:	1bffff2d 	blne	3e8 <exit>
 730:	eafffffe 	b	730 <__cs3_premain+0x3c>
	...
 73c:	000003e8 	.word	0x000003e8

00000740 <_exit>:
 740:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 744:	e3a00018 	mov	r0, #24
 748:	e59f1004 	ldr	r1, [pc, #4]	; 754 <_exit+0x14>
 74c:	ef123456 	svc	0x00123456
 750:	eafffffe 	b	750 <_exit+0x10>
 754:	00020026 	.word	0x00020026

00000758 <__cs3_isr_interrupt>:
 758:	eafffffe 	b	758 <__cs3_isr_interrupt>

0000075c <__cs3_isr_undef>:
 75c:	eafffffe 	b	75c <__cs3_isr_undef>

00000760 <__cs3_isr_swi>:
 760:	eafffffe 	b	760 <__cs3_isr_swi>

00000764 <__cs3_isr_pabort>:
 764:	eafffffe 	b	764 <__cs3_isr_pabort>

00000768 <__cs3_isr_dabort>:
 768:	eafffffe 	b	768 <__cs3_isr_dabort>

0000076c <__cs3_isr_irq>:
 76c:	eafffffe 	b	76c <__cs3_isr_irq>

00000770 <__cs3_isr_fiq>:
 770:	eafffffe 	b	770 <__cs3_isr_fiq>

00000774 <__libc_init_array>:
 774:	e92d4070 	push	{r4, r5, r6, lr}
 778:	e59f506c 	ldr	r5, [pc, #108]	; 7ec <__libc_init_array+0x78>
 77c:	e59f606c 	ldr	r6, [pc, #108]	; 7f0 <__libc_init_array+0x7c>
 780:	e0656006 	rsb	r6, r5, r6
 784:	e1b06146 	asrs	r6, r6, #2
 788:	12455004 	subne	r5, r5, #4
 78c:	13a04000 	movne	r4, #0
 790:	0a000005 	beq	7ac <__libc_init_array+0x38>
 794:	e5b53004 	ldr	r3, [r5, #4]!
 798:	e2844001 	add	r4, r4, #1
 79c:	e1a0e00f 	mov	lr, pc
 7a0:	e12fff13 	bx	r3
 7a4:	e1560004 	cmp	r6, r4
 7a8:	1afffff9 	bne	794 <__libc_init_array+0x20>
 7ac:	e59f5040 	ldr	r5, [pc, #64]	; 7f4 <__libc_init_array+0x80>
 7b0:	e59f6040 	ldr	r6, [pc, #64]	; 7f8 <__libc_init_array+0x84>
 7b4:	e0656006 	rsb	r6, r5, r6
 7b8:	eb000029 	bl	864 <_init>
 7bc:	e1b06146 	asrs	r6, r6, #2
 7c0:	12455004 	subne	r5, r5, #4
 7c4:	13a04000 	movne	r4, #0
 7c8:	0a000005 	beq	7e4 <__libc_init_array+0x70>
 7cc:	e5b53004 	ldr	r3, [r5, #4]!
 7d0:	e2844001 	add	r4, r4, #1
 7d4:	e1a0e00f 	mov	lr, pc
 7d8:	e12fff13 	bx	r3
 7dc:	e1560004 	cmp	r6, r4
 7e0:	1afffff9 	bne	7cc <__libc_init_array+0x58>
 7e4:	e8bd4070 	pop	{r4, r5, r6, lr}
 7e8:	e12fff1e 	bx	lr
 7ec:	0000087c 	.word	0x0000087c
 7f0:	0000087c 	.word	0x0000087c
 7f4:	0000087c 	.word	0x0000087c
 7f8:	00000884 	.word	0x00000884

Disassembly of section .rodata:

00000800 <_global_impure_ptr-0x5c>:
 800:	62614c0a 	.word	0x62614c0a
 804:	79622036 	.word	0x79622036
 808:	6e754820 	.word	0x6e754820
 80c:	20726574 	.word	0x20726574
 810:	6c756150 	.word	0x6c756150
 814:	206e6f73 	.word	0x206e6f73
 818:	0000000a 	.word	0x0000000a
 81c:	73657250 	.word	0x73657250
 820:	73452073 	.word	0x73452073
 824:	6f742063 	.word	0x6f742063
 828:	61747320 	.word	0x61747320
 82c:	0a3a7472 	.word	0x0a3a7472
 830:	00000000 	.word	0x00000000
 834:	65746e45 	.word	0x65746e45
 838:	20612072 	.word	0x20612072
 83c:	69727473 	.word	0x69727473
 840:	202c676e 	.word	0x202c676e
 844:	6e656874 	.word	0x6e656874
 848:	65727020 	.word	0x65727020
 84c:	5b207373 	.word	0x5b207373
 850:	45544e45 	.word	0x45544e45
 854:	0a2e5d52 	.word	0x0a2e5d52
 858:	00000000 	.word	0x00000000

0000085c <_global_impure_ptr>:
 85c:	000008c8 00000043                       ....C...

00000864 <_init>:
 864:	e1a0c00d 	mov	r12, sp
 868:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 86c:	e24cb004 	sub	r11, r12, #4
 870:	e24bd028 	sub	sp, r11, #40	; 0x28
 874:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 878:	e12fff1e 	bx	lr

0000087c <__init_array_start>:
 87c:	0000068c 	.word	0x0000068c

00000880 <__frame_dummy_init_array_entry>:
 880:	00000208                                ....

00000884 <__libc_fini>:
 884:	e1a0c00d 	mov	r12, sp
 888:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 88c:	e24cb004 	sub	r11, r12, #4
 890:	e24bd028 	sub	sp, r11, #40	; 0x28
 894:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 898:	e12fff1e 	bx	lr

0000089c <__fini_array_start>:
 89c:	000001c4 	.word	0x000001c4

000008a0 <__cs3_regions>:
	...
 8ac:	00000cf8 	.word	0x00000cf8
 8b0:	00000020 	.word	0x00000020

000008b4 <__cs3_regions_end>:
 8b4:	00000000 	.word	0x00000000
